import streamlit as st
import pandas as pd

st.set_page_config(page_title="–ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤", layout="wide")

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏—Ç—Ä–∏–Ω—ã
@st.cache_data
def load_data():
    return pd.read_csv("vitrina.csv", delimiter=",", encoding="cp1251")

df = load_data()

# --- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
df["duratoin_sec"] = df["duratoin_sec"].astype(str).str.replace(",", ".").astype(float)

# --- üéõ –§–ò–õ–¨–¢–†–´ (sidebar)
st.sidebar.header("üìå –§–∏–ª—å—Ç—Ä—ã")

# –°—Ç–∞—Ç—É—Å—ã –∑–≤–æ–Ω–∫–æ–≤
all_statuses = df["call_status"].dropna().unique().tolist()
selected_statuses = st.sidebar.multiselect(
    "–°—Ç–∞—Ç—É—Å –∑–≤–æ–Ω–∫–∞", options=all_statuses, default=all_statuses
)

# –û–ø–µ—Ä–∞—Ç–æ—Ä—ã
all_agents = df["agent_login"].dropna().unique().tolist()
selected_agent = st.sidebar.selectbox("–û–ø–µ—Ä–∞—Ç–æ—Ä", ["–í—Å–µ"] + sorted(all_agents))

# –°–ª–∞–π–¥–µ—Ä –ø–æ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
min_dur = int(df["duratoin_sec"].min())
max_dur = int(df["duratoin_sec"].max())
dur_range = st.sidebar.slider(
    "–î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–≤–æ–Ω–∫–∞ (—Å–µ–∫)", min_value=min_dur, max_value=max_dur,
    value=(min_dur, max_dur)
)

# –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ (—Ä–µ–∞–ª—å–Ω–æ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ —Ö–∏–Ω—Ç ‚Äî –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç —Ñ–∏–ª—å—Ç—Ä—ã)
if st.sidebar.button("üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã"):
    st.experimental_rerun()

# --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤
filtered_df = df[
    df["call_status"].isin(selected_statuses) &
    df["duratoin_sec"].between(dur_range[0], dur_range[1])
]
if selected_agent != "–í—Å–µ":
    filtered_df = filtered_df[filtered_df["agent_login"] == selected_agent]

st.title("üìä –î–∞—à–±–æ—Ä–¥: –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∑–≤–æ–Ω–∫–æ–≤")
st.subheader("üìå –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º")

col1, col2, col3 = st.columns(3)
with col1:
    st.metric("üìû –í—Å–µ–≥–æ –∑–≤–æ–Ω–∫–æ–≤", len(filtered_df))

with col2:
    success = filtered_df[filtered_df["call_status"] == "–î–æ–∑–≤–æ–Ω, –£—Å–ø–µ—à–Ω–æ"]
    st.metric("‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö", len(success))

with col3:
    conv_subset = filtered_df[filtered_df["call_status"].isin(["–î–æ–∑–≤–æ–Ω, –£—Å–ø–µ—à–Ω–æ", "–î–æ–∑–≤–æ–Ω, –û—Ç–∫–∞–∑"])]
    success = conv_subset[conv_subset["call_status"] == "–î–æ–∑–≤–æ–Ω, –£—Å–ø–µ—à–Ω–æ"]
    refused = conv_subset[conv_subset["call_status"] == "–î–æ–∑–≤–æ–Ω, –û—Ç–∫–∞–∑"]

    total = len(success) + len(refused)
    conv = round(len(success) / total * 100, 2) if total > 0 else 0.0

    st.metric("–ö–æ–Ω–≤–µ—Ä—Å–∏—è", f"{conv} %")


st.subheader("üìä –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º")
st.bar_chart(filtered_df["call_status"].value_counts())

st.subheader("‚è± –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –ø–æ —Å—Ç–∞—Ç—É—Å—É")
st.dataframe(
    filtered_df.groupby("call_status")["duratoin_sec"]
    .mean()
    .round(2)
    .sort_values(ascending=False)
    .reset_index()
    .rename(columns={"duratoin_sec": "–°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å (—Å–µ–∫)"})
)

st.subheader("üìé –í—ã–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö")
csv = filtered_df.to_csv(index=False, sep=";").encode("cp1251")

st.download_button(
    label="üíæ –°–∫–∞—á–∞—Ç—å –∫–∞–∫ CSV",
    data=csv,
    file_name="filtered_calls.csv",
    mime="text/csv"
)

st.subheader("üìÜ –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –ø–æ –¥–∞—Ç–µ –∏ –≤—Ä–µ–º–µ–Ω–∏")

# –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ task_created ‚Äî —ç—Ç–æ datetime
filtered_df["task_created"] = pd.to_datetime(filtered_df["task_created"], errors="coerce")

# –ö–æ–ª-–≤–æ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ –¥–Ω—è–º
calls_by_day = filtered_df["task_created"].dt.date.value_counts().sort_index()
st.line_chart(calls_by_day)

# –ö–æ–ª-–≤–æ –∑–≤–æ–Ω–∫–æ–≤ –ø–æ —á–∞—Å–∞–º
calls_by_hour = filtered_df["task_created"].dt.hour.value_counts().sort_index()
st.bar_chart(calls_by_hour)

st.subheader("üë• –ö–æ–Ω–≤–µ—Ä—Å–∏—è –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º")

# –¢–æ–ª—å–∫–æ —É—Å–ø–µ—à–Ω—ã–µ –∏ –æ—Ç–∫–∞–∑–Ω—ã–µ –∑–≤–æ–Ω–∫–∏
conv_df = filtered_df[filtered_df["call_status"].isin(["–î–æ–∑–≤–æ–Ω, –£—Å–ø–µ—à–Ω–æ", "–î–æ–∑–≤–æ–Ω, –û—Ç–∫–∞–∑"])]

# –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø–æ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞–º
group_stats = conv_df.groupby(["agent_login", "call_status"]).size().unstack(fill_value=0)
group_stats = group_stats.reindex(columns=["–î–æ–∑–≤–æ–Ω, –£—Å–ø–µ—à–Ω–æ", "–î–æ–∑–≤–æ–Ω, –û—Ç–∫–∞–∑"], fill_value=0)
group_stats["conversion_%"] = (
    group_stats["–î–æ–∑–≤–æ–Ω, –£—Å–ø–µ—à–Ω–æ"] /
    (group_stats["–î–æ–∑–≤–æ–Ω, –£—Å–ø–µ—à–Ω–æ"] + group_stats["–î–æ–∑–≤–æ–Ω, –û—Ç–∫–∞–∑"]).replace(0, 1) * 100
).round(2)

st.dataframe(group_stats.sort_values(by="conversion_%", ascending=False))
